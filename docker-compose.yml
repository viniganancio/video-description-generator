# Docker Compose for local development and testing
# Optional - provides local DynamoDB and S3-compatible storage

version: '3.8'

services:
  # Local DynamoDB
  dynamodb-local:
    image: amazon/dynamodb-local:latest
    ports:
      - "8000:8000"
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb", "-inMemory"]
    environment:
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
    volumes:
      - dynamodb_data:/home/dynamodblocal/data
    networks:
      - video-processing

  # Local S3 (MinIO)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - video-processing

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - video-processing
    command: redis-server --appendonly yes

  # Local development container (optional)
  dev-environment:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - .:/workspace
      - ~/.aws:/home/developer/.aws:ro
    working_dir: /workspace
    environment:
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - AWS_DEFAULT_REGION=us-east-1
      - DYNAMODB_ENDPOINT=http://dynamodb-local:8000
      - S3_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
    depends_on:
      - dynamodb-local
      - minio
      - redis
    networks:
      - video-processing
    profiles:
      - dev

volumes:
  dynamodb_data:
  minio_data:
  redis_data:

networks:
  video-processing:
    driver: bridge